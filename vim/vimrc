set encoding=utf-8
scriptencoding utf-8

" Plugins
"
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"   https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
call plug#begin()
Plug 'chriskempson/base16-vim'
Plug 'ctrlpvim/ctrlp.vim' | Plug 'nixprime/cpsm', {'do': './install.sh'} | Plug 'jasoncodes/ctrlp-modified.vim'
Plug 'tpope/vim-apathy'
Plug 'tpope/vim-characterize'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-unimpaired'
Plug 'lifepillar/vim-mucomplete'
Plug 'machakann/vim-highlightedyank'
Plug 'machakann/vim-sandwich'
Plug 'machakann/vim-textobj-delimited'
Plug 'machakann/vim-vimhelplint', {'for': 'help'}
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/goyo.vim', {'on': 'Goyo'}
Plug 'junegunn/gv.vim', {'on': ['GV', 'GV!']}
Plug 'junegunn/limelight.vim', {'on': 'Limelight'}
Plug 'junegunn/vader.vim', {'for': 'vader'}
Plug 'junegunn/vim-peekaboo'
Plug 'justinmk/vim-dirvish'
Plug 'moll/vim-bbye'
Plug 'xtal8/traces.vim'
Plug 'romainl/vim-qf'
Plug 'skywind3000/asyncrun.vim', {'on': ['AsyncRun', 'AsyncRun!']}
Plug 'wincent/ferret'
Plug 'wincent/loupe'
Plug 'wincent/pinnacle'
Plug 'wincent/terminus'
Plug 'solarnz/arcanist.vim', {'for': 'arcanistdiff'}
Plug 'elixir-editors/vim-elixir', {'for': 'elixir'}
Plug 'vim-erlang/vim-erlang-runtime', {'for': 'erlang'}
Plug 'fatih/vim-go', {'for': 'go'}
Plug 'tfnico/vim-gradle', {'for': ['groovy', 'kotlin', 'java']}
Plug 'pangloss/vim-javascript', {'for': 'javascript'}
Plug 'udalov/kotlin-vim', {'for': 'kotlin'}
Plug 'cespare/vim-toml', {'for': 'toml'}
Plug 'keith/swift.vim', {'for': 'swift'}
Plug 'solarnz/thrift.vim', {'for': 'thrift'}
Plug 'Glench/Vim-Jinja2-Syntax', {'for': ['jinja', 'jinja.html']}
Plug 'jparise/vim-graphql', {'for': ['graphql', 'javascript']}
Plug 'jparise/hive.vim', {'for': 'hive'}
Plug 'raimon49/requirements.txt.vim', {'for': 'requirements'}
Plug 'bfontaine/Brewfile.vim', {'for': 'ruby'}
if has('timers') && (has('nvim') || (exists('*job_start')))
    Plug 'ludovicchabant/vim-gutentags'
    Plug 'w0rp/ale'
endif
call plug#end()

runtime macros/matchit.vim

set autoindent          " turn autoindenting on
set autowrite           " auto-save before running external commands
set backspace=indent,eol,start " smarter backspace
set cmdwinheight=3      " height of the command window
set complete=.,w,b,u,t,i,kspell " completion sources
set completeopt=menuone,longest,preview " insert mode completion options
set fillchars=vert:│    " window separator character
set expandtab           " expand tabs to spaces
set formatoptions+=nr   " options for "text format" ("gp")
set hidden              " enable hidden buffers
set history=100         " remember the last 100 lines of command-line history
set ignorecase          " mostly ignore case in search patterns. see smartcase
set incsearch           " use incremental search
set nojoinspaces        " don't insert two spaces after period when joining lines
set laststatus=2        " always show status line
set lazyredraw          " don't update screen while executing commands
set listchars=tab:»·,extends:›,precedes:‹,nbsp:␣,trail:·
set modelines=0         " turn off modelines
set mouse=a             " enable the mouse for all modes
set nrformats=alpha,hex " increment alphabet characters and hex numbers
set report=0            " show all changes
set ruler               " show cursor position
set scrolloff=3         " scroll when within 3 lines of the screen's edge
set shiftround          " round indent size to a multiple of shiftwidth
set shiftwidth=4        " number of spaces in each indent
set shortmess=astI      " abbreviate all messages
set showbreak=↪\        " show at the start of wrapped lines
set noshowcmd           " don't show incomplete commands
set smartcase           " respect uppercase characters when searching
set smarttab            " smart movement and deleting based on tab settings
set softtabstop=4       " set soft tab stop to four spaces
set splitbelow          " open horizontal splits below current window
set splitright          " open vertical splits to the right
set nostartofline       " don't jump to first char with page commands
set synmaxcol=800       " don't attempt to syntax highlight long lines
set tabstop=4           " set tabs to eight spaces
set textwidth=78        " set the maximum text width
set title               " turn on the titlebar
set undofile            " maintain undo history between sessions
set updatetime=250      " speed up file sync frequency
set wildcharm=<C-Z>     " 'wildchar' but for use within commands and macros
set wildignore+=*/.git/*,*/.hg/*,*.swp,*.o " file patterns to ignore
set wildmenu            " use menu when in 'full' command-line completion mode
set wildmode=list:longest,full " completion mode behavior
set nowritebackup       " don't write backups

if !has('nvim')
  set clipboard^=autoselect " copy visual selection area system clipboard
endif

if exists('&belloff')
    set belloff=all
else
    set visualbell t_vb=
endif

if has('linebreak') && exists('&breakindent')
    set breakindent     " indent wrapped lines to match start
endif

if has('diff') && has('patch-8.1.0360')
  set diffopt+=algorithm:patience
  set diffopt+=indent-heuristic
endif

if v:version > 703 || has('patch-7.3.541')
    set formatoptions+=j " remove comment leader when joining comment lines
endif
if v:version > 704 || has('patch-7.4.314')
    set shortmess+=c    " completion messages
endif

" Swap files, etc.
if $USER !=# 'root'
    set directory=~/.cache/vim//,~/tmp//,.
    set undodir=~/.cache/vim//,~/tmp//
else
    set noswapfile
    set noundofile
    set viminfo=
endif

" Autocommands
if has('autocmd')
    augroup VimStartup
        autocmd!

        " Resize all windows when vim itself is resized.
        autocmd VimResized * execute "normal! \<c-w>="

        " When reading a file, always jump to its last known cursor position,
        " unless the position is invalid or we're inside of an event handler.
        autocmd BufReadPost *
        \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit' |
        \   execute "normal! g`\"" |
        \ endif

        " Standardize spelling error highlighting across all color schemes.
        autocmd ColorScheme * highlight clear SpellBad
        autocmd ColorScheme * highlight clear SpellCap
        autocmd ColorScheme * highlight SpellBad cterm=undercurl
        autocmd ColorScheme * highlight SpellCap cterm=undercurl
        autocmd ColorScheme * highlight VertSplit ctermbg=NONE guibg=NONE

        if exists('##TerminalOpen')
          autocmd TerminalOpen * runtime! ftplugin/terminal.vim
        endif
    augroup END
endif

" Platform / GUI options
if has('gui_running')
    colorscheme base16-ocean
    set guicursor+=a:blinkon0
    set guioptions=aAeimgr

    if has('gui_macvim')
        silent! set guifont=Source\ Code\ Pro:h14
        if &guifont !=? 'Source Code Pro:h14'
            set guifont=Menlo:h14
        endif
    elseif has('gui_win32')
        set guifont=Consolas:h10.5
    endif
elseif has('termguicolors')
    set termguicolors
    colorscheme base16-ocean
else
    colorscheme mustang
endif

" Highlight conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" Avoid unintentional switches to Ex mode.
noremap Q <Nop>

" Make Y behave like other capital letter commands.
nnoremap Y y$

" Buffer management
nnoremap ,              :buffers<CR>:buffer<Space>
nnoremap <silent> <tab> :buffer#<CR>
nnoremap <leader><tab>  :A<CR>
nnoremap <leader>d      :Bdelete<CR>
nnoremap <leader>D      :w\|:silent :Bdelete<CR>

" Quickfix management
nnoremap <silent> [l :lprev<CR>zz
nnoremap <silent> ]l :lnext<CR>zz
nnoremap <silent> [q :cprev<CR>zz
nnoremap <silent> ]q :cnext<CR>zz
nmap <leader>l <Plug>(qf_loc_toggle)
nmap <leader>q <Plug>(qf_qf_toggle)

" ALE mappings
nmap [w <Plug>(ale_previous_wrap)
nmap ]w <Plug>(ale_next_wrap)
nmap <leader>F <Plug>(ale_fix)
nmap <leader>L <Plug>(ale_lint)

" CtrlP mappings
let g:ctrlp_map=''
nnoremap <silent> <leader>\ :CtrlP<CR>
nnoremap <silent> <leader>m :CtrlPBranchModified<CR>

" Ferret mappings
let g:FerretMap=0
let g:FerretQFCommands=0
let g:FerretQFOptions=0
nmap <leader>a <Plug>(FerretAck)
nmap <leader>s <Plug>(FerretAckWord)
nmap <leader>S :Ack <C-R><C-W><Space><C-R>=expand('%:h')<CR>

" Fugitive mappings
nnoremap <leader>gb :Gblame<CR>
