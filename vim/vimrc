set encoding=utf-8
scriptencoding utf-8

" Plugins
"
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"   https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
call plug#begin()
Plug 'rhysd/vim-color-spring-night'
Plug 'sainnhe/edge'
Plug 'sainnhe/everforest'
Plug 'vyshane/cleanroom-vim-color'
Plug 'editorconfig/editorconfig-vim'
Plug 'tpope/vim-characterize'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-scriptease'
Plug 'machakann/vim-highlightedyank'
Plug 'machakann/vim-sandwich'
Plug 'machakann/vim-textobj-delimited'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/goyo.vim', {'on': ['Goyo']}
Plug 'junegunn/gv.vim', {'on': ['GV', 'GV!']}
Plug 'junegunn/vader.vim', {'for': 'vader'}
Plug 'justinmk/vim-dirvish'
Plug 'peterrincker/vim-argumentative'
Plug 'peterrincker/vim-searchlight'
Plug 'xtal8/traces.vim'
Plug 'romainl/vim-cool'
Plug 'romainl/vim-qf'
Plug 'wsdjeg/vim-fetch'
Plug 'vim-python/python-syntax', {'for': 'python'}
Plug 'Vimjas/vim-python-pep8-indent', {'for': 'python'}
Plug 'elixir-editors/vim-elixir', {'for': 'elixir'}
Plug 'fatih/vim-go', {'for': 'go'}
Plug 'udalov/kotlin-vim', {'for': 'kotlin'}
Plug 'keith/swift.vim', {'for': 'swift'}
Plug 'solarnz/thrift.vim', {'for': 'thrift'}
Plug 'mustache/vim-mustache-handlebars', {'for': 'mustache'}
Plug 'Glench/Vim-Jinja2-Syntax', {'for': ['jinja', 'jinja.html']}
Plug 'jparise/vim-graphql', {'for': ['graphql', 'javascript', 'typescript']}
Plug 'raimon49/requirements.txt.vim', {'for': 'requirements'}
if has('timers') && (has('nvim') || (exists('*job_start')))
  Plug 'ludovicchabant/vim-gutentags'
  Plug 'dense-analysis/ale'
endif
let fzf_prefix = exists('$HOMEBREW_PREFIX') ? $HOMEBREW_PREFIX : '/usr/local'
if isdirectory(fzf_prefix.'/opt/fzf')
  Plug fzf_prefix.'/opt/fzf'
endif
if has('nvim')
  Plug 'rmehri01/onenord.nvim'
endif
call plug#end()

runtime! ftplugin/man.vim
packadd! cfilter
packadd! matchit

set autoread            " auto-read files that are changed outside of vim
set autowrite           " auto-save before running external commands
set backspace=indent,eol,start " smarter backspace
set completeopt=menuone,preview " insert mode completion options
set fillchars=vert:│    " window separator character
set expandtab           " expand tabs to spaces
set hidden              " enable hidden buffers
set hlsearch            " enabled search highlights
set icon                " set icon text of the window to the current filename
set incsearch           " use incremental search
set nojoinspaces        " don't insert two spaces after period when joining lines
set laststatus=2        " always show status line
set lazyredraw          " don't update screen while executing commands
set modelines=0         " turn off modelines
set mouse=a             " enable the mouse for all modes
set nrformats=alpha,hex " increment alphabet characters and hex numbers
set path=.,,            " start with a simplified 'path' on all systems
set report=0            " show all changes
set scrolloff=3         " scroll when within 3 lines of the screen's edge
set shiftround          " round indent size to a multiple of shiftwidth
set shiftwidth=4        " number of spaces in each indent
set showbreak=↪\        " show at the start of wrapped lines
set smarttab            " smart movement and deleting based on tab settings
set softtabstop=-1      " set soft tab stop to match 'shiftwidth'
set splitbelow          " open horizontal splits below current window
set splitright          " open vertical splits to the right
set nostartofline       " don't jump to first char with page commands
set tabstop=4           " set tabs to eight spaces
set ttimeoutlen=10      " speed up key codes and mapped keys
set undofile            " maintain undo history between sessions
set updatetime=250      " speed up file sync frequency
set wildmenu            " use menu when in 'full' command-line completion mode
set wildmode=longest,list:full " completion mode behavior
set nowritebackup       " don't write backups

set complete=.          " current buffer
set complete+=w         " buffers from other windows
set complete+=b         " other loaded, listed buffers
set complete+=u         " other unloaded, listed buffers
set complete+=kspell    " currently active 'spell' dictionary
set complete+=t         " tags

set formatoptions+=n    " recognize numbered lists
set formatoptions+=r    " insert comment leader after <Enter>
set formatoptions-=o    " don't insert comment leader after 'o' or 'O'
set formatoptions+=j    " remove comment leader when joining comment lines

set listchars=tab:»·
set listchars+=trail:·
set listchars+=extends:›
set listchars+=precedes:‹
set listchars+=nbsp:␣

set shortmess=a         " all standard abbreviations
set shortmess+=s        " disable 'search hit BOTTOM', etc.
set shortmess+=t        " truncate file messages to fit command line
set shortmess+=I        " disable :intro message when starting vim
set shortmess+=c        " completion messages

if !has('nvim')
  set clipboard^=autoselect " copy visual selection area to system clipboard
endif

if exists('&belloff')
    set belloff=all
else
    set visualbell t_vb=
endif

if has('linebreak') && exists('&breakindent')
    set breakindent " indent wrapped lines to match start
endif

if has('diff') && has('patch-8.1.0360')
  set diffopt+=algorithm:patience
  set diffopt+=indent-heuristic
endif

if exists(':Man')
  let g:ft_man_open_mode='vert'
  set keywordprg=:Man
endif

" Swap files, etc.
if $USER !=# 'root'
  if has('nvim')
    set directory=~/.cache/nvim,~/tmp,/tmp,.
    set undodir=~/.cache/nvim,~/tmp,/tmp
  else
    set directory=~/.cache/vim,~/tmp,/tmp,.
    set undodir=~/.cache/vim,~/tmp,/tmp
  endif
else
  set noswapfile
  set noundofile
  set viminfo=
endif

" File patterns to ignore when globbing, expanding wilcards, and completing
" file and directory names.
set wildignore=*.swp,*.bak
set wildignore+=*.pyc,*.class,*.o
set wildignore+=*/.git/**/*,*/.hg/**/*
set wildignore+=tags
set wildignore+=*.tar.*

if &diff
  let g:gitgutter_enabled=0
  let g:gutentags_dont_load=1
endif

" Autocommands
if has('autocmd')
    augroup VimStartup
        autocmd!

        " Check if buffer was changed outside of vim when focus returns.
        autocmd FocusGained * silent! checktime

        " Resize all windows when vim itself is resized.
        autocmd VimResized * silent! wincmd =

        " When reading a file, always jump to its last known cursor position,
        " unless the position is invalid or we're inside of an event handler.
        autocmd BufReadPost *
        \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit' |
        \   execute "normal! g`\"" |
        \ endif

        " Rebuild custom spelling files when writing their text sources.
        if has('syntax')
          autocmd BufWritePost */vim/spell/*.add silent! :mkspell! %
        endif

        " Standardize some highlight groups across all color schemes.
        autocmd ColorScheme * highlight clear SpellBad
        autocmd ColorScheme * highlight clear SpellCap
        autocmd ColorScheme * highlight SpellBad cterm=undercurl
        autocmd ColorScheme * highlight SpellCap cterm=undercurl
        autocmd ColorScheme * highlight VertSplit ctermbg=NONE guibg=NONE
        autocmd ColorScheme * highlight link Searchlight Incsearch

        if exists('##TerminalOpen')
          autocmd TerminalOpen * runtime! ftplugin/terminal.vim
        endif
    augroup END
endif

" Cursor shapes
if !has('nvim') && exists('$ITERM_PROFILE')
  let &t_SI="\<Esc>]1337;CursorShape=1\x7"
  let &t_SR="\<Esc>]1337;CursorShape=2\x7"
  let &t_EI="\<Esc>]1337;CursorShape=0\x7"
endif

" https://sw.kovidgoyal.net/kitty/faq/#using-a-color-theme-with-a-background-color-does-not-work-well-in-vim
if &term ==# 'xterm-kitty'
  let &t_ut=''
endif

" Color scheme configuration
let g:everforest_background = 'hard'
let g:spring_night_high_contrast=1
let g:spring_night_cterm_italic=1

augroup ColorSchemes
  autocmd!
  autocmd ColorScheme spring-night highlight! link Todo Special
  autocmd ColorScheme spring-night highlight! ALEError ctermbg=235 guibg=#3a4b5c
  autocmd ColorScheme spring-night highlight! ALEErrorSign cterm=bold ctermfg=210 ctermbg=235 gui=bold guifg=#fd8489 guibg=#3a4b5c
  autocmd ColorScheme spring-night highlight! link ALEWarning ALEError
  autocmd ColorScheme spring-night highlight! link ALEVirtualTextError NonText
  autocmd ColorScheme spring-night highlight! link ALEVirtualTextWarning NonText
augroup END

" Platform / GUI options
if has('gui_running')
    colorscheme base16-ocean
    set guicursor+=a:blinkon0
    set guioptions=aAeimgr
elseif has('termguicolors')
  set termguicolors
  if &background == "dark"
    colorscheme spring-night
  else
    colorscheme edge
  endif
else
    colorscheme mustang
endif

" Highlight conflict markers
match ErrorMsg '^\(<\|=\||\|>\)\{7\}\([^=].\+\)\?$'

" Avoid unintentional switches to Ex mode.
noremap Q <Nop>

" Make Y behave like other capital letter commands.
nnoremap Y y$

" Paste most recent yank.
nnoremap <leader>p "0p
nnoremap <leader>P "0P

" Buffer management
nnoremap <Space>        :buffers<CR>:buffer<Space>
nnoremap <expr> <tab>   (bufloaded(0) ? '<C-^>' : ':bnext<CR>')
nnoremap <leader><tab>  :A<CR>
nnoremap <expr> <leader>d
      \ (len(getbufinfo({'buflisted':1})) > 1
      \ ? (bufloaded(0) ? ':b#' : ':bprev')
      \ : ':enew').'\|bd#<CR>'
nnoremap <silent> <leader>% :let @*=expand("%")\|echomsg @*<CR>

command! Remove :call delete(expand('%')) | :call feedkeys("\\d")

" Quickfix management
nnoremap <silent> [l :lprev<CR>zz
nnoremap <silent> ]l :lnext<CR>zz
nnoremap <silent> [q :cprev<CR>zz
nnoremap <silent> ]q :cnext<CR>zz
nmap <leader>l <Plug>(qf_loc_toggle)
nmap <leader>q <Plug>(qf_qf_toggle)

" Tab management
nnoremap <silent> [x :tabprev<CR>
nnoremap <silent> ]x :tabnext<CR>
nnoremap <silent> <leader>x :tabclose<CR>

" Tag management
nnoremap <leader>t :tjump /

" Notes
nnoremap <silent> <leader>n :Notes<CR>

" Search mappings
nmap * *zz
nmap # #zz
nmap n nzz
nmap N Nzz

" Search and replace the current word in the current buffer
nnoremap <leader>r :%s/\<<C-r>=expand("<cword>")<CR>\>/

" ALE mappings
nmap [w <Plug>(ale_previous_wrap)
nmap ]w <Plug>(ale_next_wrap)
nmap <leader>F <Plug>(ale_fix)
nmap <leader>L <Plug>(ale_lint)

" Diff mappings
nmap [n <Plug>diffContextPrevious
nmap ]n <Plug>diffContextNext
xmap [n <Plug>diffContextPrevious
xmap ]n <Plug>diffContextNext
omap [n <Plug>diffContextPrevious
omap ]n <Plug>diffContextNext

" FZF mappings
nnoremap <silent> <leader>f :FZF <C-R>=expand('%:h')<CR><CR>
nnoremap <silent> <leader>\ :GitFiles<CR>
nnoremap <silent> <leader>m :GitFiles?<CR>

" Fugitive mappings
nnoremap <leader>gb :Git blame<CR>
vnoremap <leader>gb :Git blame<CR>
nnoremap <leader>gc :GBrowse!<CR>
vnoremap <leader>gc :GBrowse!<CR>
nnoremap <leader>go :GBrowse<CR>
vnoremap <leader>go :GBrowse<CR>
nnoremap <leader>gv :GV!<CR>

" Grep mappings
nnoremap <leader>a :Grep<Space>
nnoremap <leader>s :Grep -F -w -- <C-R><C-W><CR>
nnoremap <leader>S :Grep -F -w -- <C-R><C-W><Space><C-R>=expand('%:h')<CR>

" Sandwich mappings
let g:textobj_sandwich_no_default_key_mappings = 1
xmap ib <Plug>(textobj-sandwich-auto-i)
omap ib <Plug>(textobj-sandwich-auto-i)
xmap ab <Plug>(textobj-sandwich-auto-a)
omap ab <Plug>(textobj-sandwich-auto-a)

xmap iq <Plug>(textobj-sandwich-query-i)
omap iq <Plug>(textobj-sandwich-query-i)
xmap aq <Plug>(textobj-sandwich-query-a)
omap aq <Plug>(textobj-sandwich-query-a)
