set encoding=utf-8
scriptencoding utf-8

" Plugins
"
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"   https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
call plug#begin()
Plug 'croaker/mustang-vim'
Plug 'chriskempson/base16-vim'
Plug 'kien/ctrlp.vim' | Plug 'nixprime/cpsm', {'do': 'env PY3=OFF ./install.sh'}
Plug 'itchyny/lightline.vim' | Plug 'felixjung/vim-base16-lightline'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'chaoren/vim-wordmotion'
Plug 'airblade/vim-gitgutter'
Plug 'justinmk/vim-dirvish'
Plug 'moll/vim-bbye'
Plug 'romainl/vim-qf'
Plug 'wincent/ferret'
Plug 'wincent/loupe'
Plug 'wincent/terminus'
Plug 'majutsushi/tagbar', {'on': 'TagbarToggle'}
Plug 'solarnz/arcanist.vim'
Plug 'elixir-lang/vim-elixir', {'for': 'elixir'}
Plug 'slashmili/alchemist.vim', {'for': 'elixir'}
Plug 'vim-erlang/vim-erlang-runtime', {'for': 'erlang'}
Plug 'rust-lang/rust.vim', {'for': 'rust'}
Plug 'fatih/vim-go', {'for': 'go'}
Plug 'pangloss/vim-javascript', {'for': 'javascript'}
Plug 'cespare/vim-toml', {'for': 'toml'}
Plug 'rodjek/vim-puppet', {'for': 'puppet'}
Plug 'solarnz/thrift.vim', {'for': 'thrift'}
Plug 'mitsuhiko/vim-jinja', {'for': 'html'}
Plug 'mustache/vim-mustache-handlebars', {'for': 'html.handlebars'}
Plug 'godlygeek/tabular' | Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
Plug 'junegunn/vader.vim', {'for': 'vader'}
Plug 'machakann/vim-vimhelplint', {'for': 'help'}
Plug 'jparise/vim-graphql', {'for': ['graphql', 'javascript']}
Plug 'jparise/hive.vim', {'for': 'hive'}
Plug 'raimon49/requirements.txt.vim', {'for': 'requirements'}
Plug 'jvirtanen/vim-cocoapods'
Plug 'kergoth/vim-hilinks'
if has('timers') && (has('nvim') || (exists('*job_start') && exists('*ch_close_in')))
    Plug 'w0rp/ale'
endif
if v:version > 704 || v:version == 704 && has('patch2008')
    Plug 'romainl/vim-cool'
endif
if v:version >= 704
    Plug 'ludovicchabant/vim-gutentags'
endif
call plug#end()

source $VIMRUNTIME/macros/matchit.vim

set autoindent          " turn autoindenting on
set autowrite           " auto-save before running external commands
set background=dark     " dark background
set backspace=indent,eol,start " smarter backspace
set clipboard=unnamed   " use clipboard as the default register
set cmdwinheight=3      " height of the command window
set complete=.,w,b,u,t,i,kspell " completion sources
set completeopt=menu,longest,preview " insert mode completion options
set cpoptions=aABceF    " vi compatibility options
set noerrorbells        " turn off error bells
set fillchars=vert:│    " window separator character
set expandtab           " expand tabs to spaces
set formatoptions+=nr   " options for "text format" ("gp")
set hidden              " enable hidden buffers
set history=100         " remember the last 100 lines of command-line history
set hlsearch            " turn on search result highlighting
set ignorecase          " mostly ignore case in search patterns. see smartcase
set incsearch           " use incremental search
set noinsertmode        " don't start vim in insertmode
set nojoinspaces        " don't insert two spaces after period when joining lines
set laststatus=2        " always show status line
set lazyredraw          " don't update screen while executing commands
set nolist              " turn off extended character listing
set listchars=tab:»·,extends:›,precedes:‹,nbsp:␣,trail:·
set magic               " use extended regexp in search patterns
set modelines=0         " turn off modelines
set mousehide           " hide the mouse in the gui
set nonumber            " don't number lines
set report=0            " show all changes
set ruler               " show cursor position
set scrolloff=3         " scroll when within 3 lines of the screen's edge
set shiftround          " round indent size to a multiple of shiftwidth
set shiftwidth=4        " number of spaces in each indent
set shortmess=astI      " abbreviate all messages
set showbreak=↪\        " show at the start of wrapped lines
set noshowcmd           " don't show incomplete commands
set showmode            " show the current mode
set showtabline=1       " show tabline as needed
set smartcase           " respect uppercase characters when searching
set smarttab            " smart movement and deleting based on tab settings
set softtabstop=4       " set soft tab stop to four spaces
set splitbelow          " open horizontal splits below current window
set splitright          " open vertical splits to the right
set nostartofline       " don't jump to first char with page commands
set synmaxcol=800       " don't attempt to syntax highlight long lines
set tabstop=4           " set tabs to eight spaces
set textwidth=78        " set the maximum text width
set title               " turn on the titlebar
set updatetime=250      " speed up file sync frequency
set wildchar=<TAB>      " character used for command line expansion
set wildignore+=*/.git/*,*/.hg/*,*.swp,*.o " file patterns to ignore
set wildmenu            " use menu when in 'full' command-line completion mode
set wildmode=list:longest,full " completion mode behavior
set wrapmargin=0        " wrap from the right margin
set nowritebackup       " don't write backups

if exists('&belloff')
    set belloff=all
else
    set visualbell t_vb=
endif

if has('linebreak') && exists('&breakindent')
    set breakindent                 " indent wrapped lines to match start
    if exists('&breakindentopt')
        set breakindentopt=shift:2  " emphasize broken lines by indenting them
    endif
endif

if v:version > 703 || v:version == 703 && has('patch541')
    set formatoptions+=j " remove comment leader when joining comment lines
endif

" Swap files, etc.
if $USER !=# 'root'
    set directory=~/.cache/vim//,~/tmp//,.
else
    set noswapfile
    set viminfo=
endif

" Platform / GUI options
if has('gui_running')
    colorscheme base16-ocean
    hi VertSplit ctermbg=NONE guibg=NONE
    set guioptions=aAeimgr
    set ruler
    set title

    if has('gui_macvim')
        silent! set guifont=Source\ Code\ Pro:h14
        if &guifont !=? 'Source Code Pro:h14'
            set guifont=Menlo:h14
        endif
    elseif has('gui_win32')
        set guifont=Consolas:h10.5
    endif
elseif has('termguicolors')
    set termguicolors
    colorscheme base16-ocean
    hi VertSplit ctermbg=NONE guibg=NONE
else
    let g:loaded_lightline = 1
    colorscheme mustang
    hi Todo ctermfg=9 ctermbg=234 term=standout
endif

" Autocommands
if has('autocmd')
    augroup VimStartup
        autocmd!

        " Resize all windows when vim itself is resized.
        autocmd VimResized * execute "normal! \<c-w>="

        " When editing a file, always jump to the last known cursor position,
        " unless the position is invalid or we're inside of an event handler.
        autocmd BufReadPost *
        \ if line("'\"") >= 1 && line("'\"") <= line("$") |
        \   execute "normal! g`\"" |
        \ endif
    augroup END
endif

" Avoid unintentional switches to Ex mode.
nmap Q q

" Buffer management
nnoremap <Left>     :bprev<CR>
nnoremap <Right>    :bnext<CR>
nnoremap <leader>d  :Bdelete<CR>

" Window management
nmap <leader>l <Plug>qf_loc_toggle
nmap <leader>q <Plug>qf_qf_toggle

" Make <C-L> also update diff and syntax highlighting
nnoremap <silent> <C-L> :diffupdate<CR>:syntax sync fromstart<CR><C-L>

" Reformat the current paragraph to textwidth
nnoremap <C-J> gqap

" Move between ALE lint warnings
nnoremap <silent> [w <Plug>(ale_previous_wrap)
nnoremap <silent> ]w <Plug>(ale_next_wrap)

" Open a recently-used file
nnoremap <silent> <Leader>o :CtrlPMRUFiles<CR>

" Toggle the tagbar.
nnoremap <silent> <leader>t :TagbarToggle<CR>
